
========================================================================

** ELF Header Information

    File Name: test.obj

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    File Type: ET_REL (Relocatable object) (1)
    Machine: EM_ARM (ARM)

    Entry offset (in SHF_ENTRYSECT section): 0x00000000
    Flags: EF_ARM_MAPSYMSFIRST (0x02000010)

    EABI conformance : ARM EABI Version 2.

    Built with
    Thumb C Compiler, ADS1.2 [Build 842]
    ARM Linker, ADS1.2 [Build 842] 

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 0
    Section header entries: 10

    Program header offset: 0 (0x00000000)
    Section header offset: 1564 (0x0000061c)

    Section header string table index: 9

========================================================================

** Section #1 '.text' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 160 bytes (alignment 4)

    my_add
    BuildAttributes$$THUMB_ISAv1$M$PE$A:L22$X:L11$S22$IW$~STKCKD$~SHL$OSPACE$PRES8
    $t
    .text
        0x00000000:    1840        @.      ADD      r0,r0,r1
        0x00000002:    1a41        A.      SUB      r1,r0,r1
        0x00000004:    1a40        @.      SUB      r0,r0,r1
        0x00000006:    1840        @.      ADD      r0,r0,r1
        0x00000008:    4770        pG      BX       r14
    entrance
        0x0000000a:    b510        ..      PUSH     {r4,r14}
        0x0000000c:    b09c        ..      SUB      r13,#0x70
        0x0000000e:    a803        ..      ADD      r0,r13,#0xc
        0x00000010:    2264        d"      MOV      r2,#0x64
        0x00000012:    4916        .I      LDR      r1,0x6c
    $b
        0x00000014:    f7fffffe    ....    BL       __rt_memcpy
        0x00000018:    4c15        .L      LDR      r4,0x70
        0x0000001a:    2002        .       MOV      r0,#2
        0x0000001c:    6861        ah      LDR      r1,[r4,#4]
    $b
        0x0000001e:    f7fffffe    ....    BL       my_add  ; 0x0
        0x00000022:    1c02        ..      MOV      r2,r0
        0x00000024:    2302        .#      MOV      r3,#2
        0x00000026:    5ee0        .^      LDRSH    r0,[r4,r3]
        0x00000028:    6861        ah      LDR      r1,[r4,#4]
        0x0000002a:    9202        ..      STR      r2,[r13,#8]
        0x0000002c:    9000        ..      STR      r0,[r13,#0]
        0x0000002e:    9101        ..      STR      r1,[r13,#4]
        0x00000030:    7863        cx      LDRB     r3,[r4,#1]
        0x00000032:    7822        "x      LDRB     r2,[r4,#0]
        0x00000034:    a10f        ..      ADR      r1,0x74
        0x00000036:    a803        ..      ADD      r0,r13,#0xc
    $b
        0x00000038:    f7fffffe    ....    BL       _sprintf
        0x0000003c:    a903        ..      ADD      r1,r13,#0xc
        0x0000003e:    a012        ..      ADR      r0,0x88
    $b
        0x00000040:    f7fffffe    ....    BL       _printf
        0x00000044:    8860        `.      LDRH     r0,[r4,#2]
        0x00000046:    3001        .0      ADD      r0,#1
        0x00000048:    8060        `.      STRH     r0,[r4,#2]
        0x0000004a:    4810        .H      LDR      r0,0x8c
        0x0000004c:    68c2        .h      LDR      r2,[r0,#0xc]
        0x0000004e:    9200        ..      STR      r2,[r13,#0]
        0x00000050:    7803        .x      LDRB     r3,[r0,#0]
        0x00000052:    1d02        ..      ADD      r2,r0,#4
        0x00000054:    ca06        ..      LDMIA    r2!,{r1,r2}
        0x00000056:    a00e        ..      ADR      r0,0x90
    $b
        0x00000058:    f7fffffe    ....    BL       _printf
        0x0000005c:    b01c        ..      ADD      r13,#0x70
        0x0000005e:    bc10        ..      POP      {r4}
        0x00000060:    bc08        ..      POP      {r3}
        0x00000062:    2000        .       MOV      r0,#0
        0x00000064:    4718        .G      BX       r3
    main
        0x00000066:    2000        .       MOV      r0,#0
        0x00000068:    4770        pG      BX       r14
    $d
        0x0000006a:    0000        ..      DCW    0
        0x0000006c:    00000000    ....    DCD    0
        0x00000070:    00000000    ....    DCD    0
        0x00000074:    63256325    %c%c    DCD    1663394597
        0x00000078:    323a6325    %c:2    DCD    842687269
        0x0000007c:    25202b20     + %    DCD    622865184
        0x00000080:    203d2064    d =     DCD    540876900
        0x00000084:    00006425    %d..    DCD    25637
        0x00000088:    00007325    %s..    DCD    29477
        0x0000008c:    00000000    ....    DCD    0
        0x00000090:    25207825    %x %    DCD    622884901
        0x00000094:    78252078    x %x    DCD    2015699064
        0x00000098:    0a782520     %x.    DCD    175645984
        0x0000009c:    00000000    ....    DCD    0

** Section #7 '.rel.text' (SHT_REL)
    Size   : 64 bytes (alignment 4)
    Symbol table '.symtab'
    8 relocations applied to section #1 '.text'


** Section #2 '.data' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 8 bytes (alignment 4)


** Section #3 '.constdata' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 100 bytes


** Section #4 '.bss' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 16 bytes (alignment 4)


** Section #5 '.symtab' (SHT_SYMTAB)
    Size   : 656 bytes (alignment 4)
    String table '.strtab'
    Last local symbol no. 23


** Section #6 '.strtab' (SHT_STRTAB)
    Size   : 284 bytes


** Section #8 '.comment' (SHT_PROGBITS)
    Size   : 164 bytes


** Section #9 '.shstrtab' (SHT_STRTAB)
    Size   : 76 bytes


